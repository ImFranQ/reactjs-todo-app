[{"J:\\workspace\\todoapp\\src\\App.js":"1","J:\\workspace\\todoapp\\src\\index.js":"2","J:\\workspace\\todoapp\\src\\reportWebVitals.js":"3","J:\\workspace\\todoapp\\src\\components\\Header\\index.js":"4","J:\\workspace\\todoapp\\src\\components\\TodoList\\index.js":"5"},{"size":1072,"mtime":1608009483378,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1608005193575,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607734765614,"results":"9","hashOfConfig":"7"},{"size":451,"mtime":1608074369141,"results":"10","hashOfConfig":"7"},{"size":3553,"mtime":1608077111777,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zhv7pa",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"J:\\workspace\\todoapp\\src\\App.js",["23","24"],"J:\\workspace\\todoapp\\src\\index.js",[],"J:\\workspace\\todoapp\\src\\reportWebVitals.js",[],"J:\\workspace\\todoapp\\src\\components\\Header\\index.js",[],"J:\\workspace\\todoapp\\src\\components\\TodoList\\index.js",["25","26","27","28","29","30"],"\r\nimport './TodoList.css'\r\n\r\nimport iconCheck from '../../aseets/images/icon-check.svg'\r\nimport iconCross from '../../aseets/images/icon-cross.svg'\r\nimport { useState } from 'react'\r\n\r\nconst tasks = [\r\n  {\r\n    checked: true,\r\n    title: 'Complete online Javascript Course'\r\n  },\r\n  {\r\n    checked: false,\r\n    title: 'Jog around the park x3'\r\n  },\r\n  {\r\n    checked: false,\r\n    title: '10 minutes meditacion'\r\n  },\r\n  {\r\n    checked: false,\r\n    title: 'Read for 1 hour'\r\n  },\r\n  {\r\n    checked: false,\r\n    title: 'Pick up groceries'\r\n  },\r\n  {\r\n    checked: false,\r\n    title: 'Complete Todo App'\r\n  }\r\n]\r\n\r\nconst CheckBox = (props) => {\r\n  const { idx, checked, onChecked } = props\r\n  return (\r\n    <div className=\"CheckBox\">\r\n      <label\r\n        htmlFor={`cbox-${idx}`}\r\n        className={`CheckBox-Label${checked? ' Checked': ''}`}\r\n      >\r\n        {checked && (<img src={iconCheck} />)}\r\n      </label>\r\n      <input\r\n        id={`cbox-${idx}`}\r\n        type=\"checkbox\"\r\n        className=\"CheckBox-Input\"\r\n        onChange={(e) => onChecked ? onChecked(e.target.checked) : ''} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TodoList = (props) => {\r\n  const [taskState, setTaskState] = useState(tasks)\r\n  const [status, setStatus] = useState(0)\r\n  \r\n  const onCheckedItem = (isChecked, index) => {\r\n    let state = [...taskState]\r\n    state[index].checked = isChecked\r\n    setTaskState(state);\r\n  }\r\n\r\n  const removeTask = (index) => {\r\n    let state = taskState.filter((_, tIdx) => tIdx !== index)\r\n    setTaskState(state);\r\n  }\r\n  \r\n  const clearConmpleted = () => {\r\n    let state = taskState.filter((t) => !t.checked)\r\n    setTaskState(state);\r\n  }\r\n\r\n  return (\r\n    <section className=\"TodoList-body\">\r\n      <div className=\"TodoList-Input TodoList-Card\">\r\n        <div className=\"TodoList-Card-Content\">\r\n          <CheckBox idx={'input'} />\r\n          <input type=\"text\" className=\"TodoListInput\" placeholder=\"What do you do today?\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"TodoList-Card\">\r\n        {taskState && taskState.filter(t => {\r\n          return (\r\n            status === 0\r\n            || (status < 0 && !t.checked)\r\n            || (status > 0 && t.checked)\r\n          )\r\n        }).map((t, idx) => (\r\n          <div key={idx} className=\"TodoList-Item TodoList-Card-Content\">\r\n            <CheckBox checked={t.checked} idx={idx} onChecked={e => onCheckedItem(e, idx)} />\r\n            <span className={`TaskTitle ${t.checked ? 'tashed' : ''}`}>{t.title}</span>\r\n            <button className=\"BtnIcon\" type=\"button\" onClick={() => removeTask(idx)}>\r\n              <img src={iconCross} width=\"12\" />\r\n            </button>\r\n          </div>\r\n        ))}\r\n\r\n        <div className=\"TodoList-Footer\">\r\n          <div className=\"TodoList-Card-Content TodoList-Footer-Content\">\r\n            <div className=\"\">{taskState.filter((t) => !t.checked).length} items left</div>\r\n            <div className=\"\">\r\n              <ul className=\"TodoList-Filter\">\r\n                <li><a href=\"#\" className=\"Link\" onClick={() => setStatus(0)}>All</a></li>\r\n                <li><a href=\"#\" className=\"Link\" onClick={() => setStatus(-1)}>Active</a></li>\r\n                <li><a href=\"#\" className=\"Link\" onClick={() => setStatus(1)}>Completed</a></li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"\">\r\n              <a href=\"#\" className=\"Link\" onClick={() => clearConmpleted()}>Clear completed</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default TodoList;",{"ruleId":"31","severity":1,"message":"32","line":18,"column":11,"nodeType":"33","endLine":18,"endColumn":57},{"ruleId":"34","severity":2,"message":"35","line":38,"column":12,"nodeType":"36","endLine":38,"endColumn":20},{"ruleId":"31","severity":1,"message":"32","line":43,"column":22,"nodeType":"33","endLine":43,"endColumn":45},{"ruleId":"31","severity":1,"message":"32","line":95,"column":15,"nodeType":"33","endLine":95,"endColumn":49},{"ruleId":"37","severity":1,"message":"38","line":105,"column":21,"nodeType":"33","endLine":105,"endColumn":79},{"ruleId":"37","severity":1,"message":"38","line":106,"column":21,"nodeType":"33","endLine":106,"endColumn":80},{"ruleId":"37","severity":1,"message":"38","line":107,"column":21,"nodeType":"33","endLine":107,"endColumn":79},{"ruleId":"37","severity":1,"message":"38","line":111,"column":15,"nodeType":"33","endLine":111,"endColumn":78},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-undef","'TodoList' is not defined.","JSXIdentifier","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]